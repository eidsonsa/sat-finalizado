
// Written by Fernando Castor in November/2017 and implemented by Eidson SÃ¡ in June/2018

exports.solve = function (fileName) {      // Gets the functions together and exports them to the Node.js
  let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result 
}

function nextAssignment(currentAssignment) {     // Receives the current assignment and changes it   

  currentAssignment[currentAssignment.length - 1]++

  for (var i = 1; i <= currentAssignment.length; i++) {
    if (currentAssignment[currentAssignment.length - i] == 2) {
      currentAssignment[currentAssignment.length - i] = 0
      currentAssignment[currentAssignment.length - i - 1]++
    }
  }

  return currentAssignment

}


function doSolve(clauses, assignment) {      // Takes the current assignment and tests it in the clauses
  
  let isSat = false
  var counter = 1
  var testArray = new Array()

  while ((!isSat) && counter != Math.pow(2, assignment.length)) { // 1 == true 0 == false
    for (var i = 0; i < clauses.length; i++) {
      testArray[i] = false
      for (var j = 0; j < clauses[i].length; j++) {    
        if (assignment[Math.abs(clauses[i][j]) - 1] == 1 && clauses[i][j] > 0) {
          testArray[i] = true
        }
        if (assignment[Math.abs(clauses[i][j]) - 1] == 0 && clauses[i][j] < 0) {
          testArray[i] = true
        }
      }
    }

    counter++
    var booleanCheck = true

    for (var i = 0; i < testArray.length; i++) {
      if (testArray[i] == false) {
        booleanCheck = false
      }
    }

    if (booleanCheck == true) {
      isSat = true
    }
    else {
      assignment = nextAssignment(assignment)
    }
  }

  let result = { 'isSat': isSat, satisfyingAssignment: null }
  if (isSat) {
    result.satisfyingAssignment = assignment
  }

  return result

}


function readClauses(text) {            // Reads the .cnf file and separates the clauses

  var clausesArray = new Array();

  for (var i = 0; i < text.length; i++) {
    if (text[i].charAt(0) != 'c' && text[i].charAt(0) != 'p' && text[i].charAt(0) != '') {
      var split = text[i].split(" ")
      if (split[split.length - 1] == 0){
        clausesArray.push(split)
        split.pop();  
      }
      else{
        var split2 = text[i + 1].split(" ")
        var concatenation = split.concat(split2)
        clausesArray.push(concatenation)
        concatenation.pop()
        i++
      }
    }
  }

  return clausesArray

}


function readVariables(clauses) {       // Takes the clauses and creates the first array of variables, in which they are false

  variablesArrayPrimitive = new Array()
  variablesArrayBoolean = new Array();

  for (var i = 0; i < clauses.length; i++) {
    for (var j = 0; j < clauses[i].length; j++) {
      var test = Math.abs(clauses[i][j])
      var itIs = false
      for (var k = 0; k < variablesArrayPrimitive.length; k++) {
        if (test == variablesArrayPrimitive[k]) {
          itIs = true
        }
      }
      if (itIs == false) {
        variablesArrayPrimitive.push(Math.abs(clauses[i][j]))
        variablesArrayBoolean.push(0)
      }
    }
  }

  return variablesArrayBoolean

}


function checkProblemSpecification(text, clauses, variables) {     // Checks if everything is correct 

  var approver = false;
  var variablesAmount = 0
  var clausesAmount = 0

  for (var i = 0; i < text.length; i++) {
    if (text[i].charAt(0) == 'p') {
      var split = text[i].split(" ")
      variablesAmount = split[2]
      clausesAmount = split[3]
    }
  }

  if (variablesAmount == variables.length && clausesAmount == clauses.length) {
    approver = true;
  }

  return approver

}


function readFormula(fileName) {             // Takes the text and returns the clauses and the variables
  let fs = require("fs")
  let text = fs.readFileSync(fileName, "utf8").split("\n")
  let clauses = readClauses(text)
  let variables = readVariables(clauses)
  let specOk = checkProblemSpecification(text, clauses, variables)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}
